---
title: "Cardiovascular Disease Analysis"
format: html
echo: false
warning: false   
message: false   
output: true
cache: true
editor: visual
fig-width: 3
fig-height: 2
fig-align: center
latex-options: [fontsize=10pt]
geometry: "top=1in, bottom=1in, left=1in, right=1in"
---

## Introduction

Cardiovascular diseases (CVD) are a leading cause of mortality worldwide. This report investigates whether cardiovascular disease (variable \`cardio\`) can be explained by other variables such as age, gender, blood pressure, BMI, and lifestyle factors like smoking, alcohol consumption, and physical activity. The analysis is based on a dataset containing various health metrics.

\newpage

## Chapter 01 Data Preparation

Task 1: Transform the variables of the data set to appropriate data types and assign factor labels for the categorical variables.

```{r}
# Load required libraries
library(dplyr)
library(knitr)
library(kableExtra)
library(tidyr) 
library(ggplot2)
library(patchwork)

# File path for the dataset
data_file <- "data_cardio.csv"

# Load the data using read.csv2 (semicolon-separated)
data_raw <- read.csv2(data_file)

# Data preprocessing
data_0 <- data_raw %>%
  mutate(
    age = round(age / 365, 2), # Convert age from days to years and round to 2 decimal places
    weight = as.numeric(weight), # Ensure the weight column is numeric
    smoke = smoke + 1, # Increment smoke for future factor conversion (to align with factor levels)
    alco = alco + 1, # Increment alco for factor conversion
    active = active + 1, # Increment active for factor conversion
    cardio = cardio + 1 # Increment cardio for factor conversion
  )

# Specify columns to be converted into factors
columns_to_factor <- c(
  "gender",
  "cholesterol",
  "gluc",
  "smoke",
  "alco",
  "active",
  "cardio"
)

# Define labels for factor levels for each column
labels_list <- list(
  gender = c("Male", "Female"),
  cholesterol = c("normal", "above normal", "well above normal"),
  gluc = c("normal", "above normal", "well above normal"),
  smoke = c("no", "yes"),
  alco = c("no", "yes"),
  active = c("no", "yes"),
  cardio = c("absent", "present")
)

# Apply factor conversion with custom labels
data <- data_0 %>%
  mutate(across(
    all_of(names(labels_list)), # Apply to columns specified in labels_list
    ~ factor(., 
             levels = seq_along(labels_list[[cur_column()]]), # Define levels as sequential indices
             labels = labels_list[[cur_column()]]) # Assign custom labels
  ))

# Create a summary for each variable manually
summary_data <- data.frame(
  variable = names(data),                          # Variable names
  class = sapply(data, class),                     # Class of each variable
  unique_values = sapply(data, function(x) length(unique(x))), # Number of unique values
  example_values = sapply(data, function(x) paste(head(unique(x), 5), collapse = ", ")) # First few unique values
)


kable(summary_data, format = "html", caption = "<b>Summary of Continuous Variables </b>") %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"), 
    full_width = F,
    position = "center"
  ) %>%
  row_spec(0, bold = TRUE, background = "#D3D3D3")  # Highlight header row

```

\newpage

## Chapter 2: Outlier Detection

Task 2: Check the continuous variables for outliers and remove implausible values.

**Summary of Continuous Variables before ourliers are removed**：

```{r, results='asis'}
#| echo: false
continuous_variables <- c("age", "height", "weight", "ap_hi", "ap_lo") 
#knitr::kable(summary(data[continuous_variables]), format = "latex", booktabs = TRUE, longtable = FALSE)

#summary_data <- as.data.frame(summary(data[continuous_variables]))
#knitr::kable(summary_data, format = "latex", booktabs = TRUE, longtable = FALSE)



# Generate the summary statistics for continuous variables
summary_table2 <- summary(data[continuous_variables])

# Convert the summary table into a kable table
kable(summary_table2, format = "html", caption = "<b>Summary of Continuous Variables</b>") %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"), # Add styles
    full_width = F,                                                       # Make it content-width
    position = "center"                                                   # Center the table
  ) %>%
  row_spec(0, bold = TRUE, background = "#D3D3D3")  # Highlight header row

# Visualize each variable
# Define the list of continuous variables
continuous_variables <- c("age", "height", "weight", "ap_hi", "ap_lo")

# Define the generate_box_plots function
generate_box_plots <- function(data, continuous_variables) {
 
  # Loop through each variable and create plots
  for (var in continuous_variables) {
    # Generate a boxplot
    boxplot <- ggplot(data, aes(y = .data[[var]])) +
      geom_boxplot(fill = "lightblue", color = "darkblue", outlier.color = "red", outlier.shape = 16) +
      labs(title = paste("Boxplot of", var), y = var) +
      theme_minimal() +
      theme(
        plot.title = element_text(hjust = 0.5),
        axis.line = element_line(linewidth = 0.5),  # 
        panel.grid.major = element_line(linewidth = 0.2),
        panel.grid.minor = element_line(linewidth = 0.1)
        )
    print(boxplot)
  }
}
```

**Boxplot before outliers are removed**:

```{r fig.align='center'}
generate_box_plots(data, continuous_variables)
```

```{r fig.align='center'}

# Function to remove outliers using the IQR method
remove_outliers <- function(x, factor = 1.5) {
  q1 <- quantile(x, 0.25, na.rm = TRUE)
  q3 <- quantile(x, 0.75, na.rm = TRUE)
  iqr <- q3 - q1
  lower_bound <- q1 - factor * iqr
  upper_bound <- q3 + factor * iqr
  x[x < lower_bound | x > upper_bound] <- NA
  return(x)
}

# Set thresholds for plausible values (based on domain knowledge)
plausible_thresholds <- list(
  age = c(0, 120),
  height = c(50, 250),
  weight = c(40, 300),
  ap_hi = c(60, 250),
  ap_lo = c(40, 150)
)

# Loop through each variable to clean outliers and implausible values
data_clean <- data
for (var in continuous_variables) {
  # Replace outliers with NA
  data_clean[[var]] <- remove_outliers(data_clean[[var]], factor = 3)
  # Apply plausible thresholds
  min_val <- plausible_thresholds[[var]][1]
  max_val <- plausible_thresholds[[var]][2]
  data_clean <- data_clean[data_clean[[var]] >= min_val & data_clean[[var]] <= max_val, ]
}

# remove the NA rows
data_clean <- na.omit(data_clean)
```

**Summary of Continuous Variables after outliers are removed：**

```{r}
# Generate the summary statistics for continuous variables outlier free
summary_table_clean <- summary(data_clean[continuous_variables])

# Convert the summary table into a kable table
kable(summary_table_clean, format = "html", caption = "<b>Summary of Continuous Variables (outliers are removed)</b>") %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"), # Add styles
    full_width = F,                                                       # Make it content-width
    position = "center"                                                   # Center the table
  ) %>%
  row_spec(0, bold = TRUE, background = "#D3D3D3")  # Highlight header row

```

**Boxplot after outliers are removed：**

```{r fig.align='center'}
generate_box_plots(data_clean, continuous_variables)
```

\newpage

## Chapter 3: BMI Calculation

Task 3: Create a new variable BMI and provide a summary table for the variable BMI for both cardio groups.

```{r}
# Calculate BMI (Body Mass Index) for each individual in the dataset
df <- data_clean %>% 
  mutate(
    BMI = weight / ((height / 100)^2)  # Convert height to meters and compute BMI using the formula: weight(kg) / height(m)^2
  )

# Create a summary table grouped by 'cardio'
summary_table <- df %>%
  group_by(cardio) %>%
  summarize(
    Count = n(),
    Mean_BMI = round(mean(BMI), 2),     # Mean BMI, rounded to 2 decimal places
    Median_BMI = round(median(BMI), 2), # Median BMI, rounded to 2 decimal places
    SD_BMI = round(sd(BMI), 2),         # Standard deviation of BMI, rounded to 2 decimal places
    Min_BMI = round(min(BMI), 2),       # Minimum BMI, rounded to 2 decimal places
    Max_BMI = round(max(BMI), 2)        # Maximum BMI, rounded to 2 decimal places
  ) %>%
  ungroup()

# Beautify the table using kableExtra
summary_table %>%
  kable(
    format = "html",  # Choose HTML format for better styling
    col.names = c("Cardio Status", "Count", "Mean BMI", "Median BMI", "SD BMI", "Min BMI", "Max BMI"),
    caption = "Summary Table of BMI by Cardio Status"
  ) %>%
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed"),
    full_width = FALSE,
    position = "center"
  ) %>%
  row_spec(0, bold = TRUE, color = "white", background = "blue")  # Highlight header row
```

\newpage
